   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LVL0:
  15               	.LFB91:
  16               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****      dualMocoLUFA Project
   3:Descriptors.c ****      Copyright (C) 2013 by morecat_lab
   4:Descriptors.c **** 
   5:Descriptors.c ****      2013/09/22
   6:Descriptors.c ****               
   7:Descriptors.c ****      http://morecatlab.akiba.coocan.jp/
   8:Descriptors.c **** 
   9:Descriptors.c ****      based on LUFA-100807
  10:Descriptors.c **** */
  11:Descriptors.c **** /*
  12:Descriptors.c ****              LUFA Library
  13:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
  14:Descriptors.c ****               
  15:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
  16:Descriptors.c ****       www.fourwalledcubicle.com
  17:Descriptors.c **** */
  18:Descriptors.c **** 
  19:Descriptors.c **** /*
  20:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  21:Descriptors.c **** 
  22:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  23:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  24:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  25:Descriptors.c ****   all copies and that both that the copyright notice and this
  26:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  27:Descriptors.c ****   documentation, and that the name of the author not be used in 
  28:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  29:Descriptors.c ****   software without specific, written prior permission.
  30:Descriptors.c **** 
  31:Descriptors.c ****   The author disclaim all warranties with regard to this
  32:Descriptors.c ****   software, including all implied warranties of merchantability
  33:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  34:Descriptors.c ****   special, indirect or consequential damages or any damages
  35:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  36:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  37:Descriptors.c ****   arising out of or in connection with the use or performance of
  38:Descriptors.c ****   this software.
  39:Descriptors.c **** */
  40:Descriptors.c **** 
  41:Descriptors.c **** /** \file
  42:Descriptors.c ****  *
  43:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  44:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  45:Descriptors.c ****  *  the device's capabilities and functions.  
  46:Descriptors.c ****  */
  47:Descriptors.c **** 
  48:Descriptors.c ****  #include "Descriptors.h"
  49:Descriptors.c ****  #include "dualMoco.h"
  50:Descriptors.c ****  
  51:Descriptors.c ****  /* On some devices, there is a factory set internal serial number which can be automatically sent 
  52:Descriptors.c ****   * the device's serial number when the Device Descriptor's .SerialNumStrIndex entry is set to USE_
  53:Descriptors.c ****   * This allows the host to track a device across insertions on different ports, allowing them to r
  54:Descriptors.c ****   * resources like COM port numbers and drivers. On demos using this feature, give a warning on uns
  55:Descriptors.c ****   * so that the user can supply their own serial number descriptor instead or remove the USE_INTERN
  56:Descriptors.c ****   * from the Device Descriptor (forcing the host to generate a serial number for each device from t
  57:Descriptors.c ****   * port location).
  58:Descriptors.c ****   */
  59:Descriptors.c ****  #if (USE_INTERNAL_SERIAL == NO_DESCRIPTOR)
  60:Descriptors.c ****      #warning USE_INTERNAL_SERIAL is not available on this AVR - please manually construct a device
  61:Descriptors.c ****  #endif
  62:Descriptors.c ****  
  63:Descriptors.c ****  /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  64:Descriptors.c ****   *  device characteristics, including the supported USB version, control endpoint size and the
  65:Descriptors.c ****   *  number of device configurations. The descriptor is read out by the USB host when the enumerati
  66:Descriptors.c ****   *  process begins.
  67:Descriptors.c ****   */
  68:Descriptors.c ****  /* for SERIAL */
  69:Descriptors.c ****  const USB_Descriptor_Device_t PROGMEM DeviceDescriptorSerial =
  70:Descriptors.c ****  {
  71:Descriptors.c ****      .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  72:Descriptors.c ****          
  73:Descriptors.c ****      .USBSpecification       = VERSION_BCD(01.10),
  74:Descriptors.c ****      .Class                  = 0x02,
  75:Descriptors.c ****      .SubClass               = 0x00,
  76:Descriptors.c ****      .Protocol               = 0x00,
  77:Descriptors.c ****                  
  78:Descriptors.c ****      .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  79:Descriptors.c ****          
  80:Descriptors.c ****      .VendorID               = ARDUINO_VID, // VID
  81:Descriptors.c ****  
  82:Descriptors.c ****      .ProductID             = ARDUINO_MODEL_PID, // PID
  83:Descriptors.c ****      .ReleaseNumber          = 0x0001,
  84:Descriptors.c ****          
  85:Descriptors.c ****      .ManufacturerStrIndex   = 0x01,
  86:Descriptors.c ****      .ProductStrIndex        = 0x02,
  87:Descriptors.c ****      .SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  88:Descriptors.c ****          
  89:Descriptors.c ****      .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  90:Descriptors.c ****  };
  91:Descriptors.c ****  
  92:Descriptors.c ****  /* for MIDI */
  93:Descriptors.c ****  const USB_Descriptor_Device_t PROGMEM DeviceDescriptorMIDI =
  94:Descriptors.c ****  {
  95:Descriptors.c ****      .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  96:Descriptors.c ****          
  97:Descriptors.c ****      .USBSpecification       = VERSION_BCD(01.10),
  98:Descriptors.c ****      .Class                  = 0x00,
  99:Descriptors.c ****      .SubClass               = 0x00,
 100:Descriptors.c ****      .Protocol               = 0x00,
 101:Descriptors.c ****                  
 102:Descriptors.c ****      .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 103:Descriptors.c ****          
 104:Descriptors.c ****      .VendorID = 0xDC0D, // Atmel
 105:Descriptors.c ****      .ProductID = 0xC6B0, // LUFA USB-MIDI Demo application
 106:Descriptors.c ****      .ReleaseNumber          = 0x0000,
 107:Descriptors.c ****          
 108:Descriptors.c ****      .ManufacturerStrIndex   = 0x01,
 109:Descriptors.c ****      .ProductStrIndex        = 0x02,
 110:Descriptors.c ****      .SerialNumStrIndex      = NO_DESCRIPTOR,
 111:Descriptors.c ****          
 112:Descriptors.c ****      .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 113:Descriptors.c ****  };
 114:Descriptors.c ****  
 115:Descriptors.c ****  /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the us
 116:Descriptors.c ****   *  of the device in one of its supported configurations, including information about any device i
 117:Descriptors.c ****   *  and endpoints. The descriptor is read out by the USB host during the enumeration process when 
 118:Descriptors.c ****   *  a configuration so that the host may correctly communicate with the USB device.
 119:Descriptors.c ****   */
 120:Descriptors.c ****  /* for Serial */
 121:Descriptors.c ****  const USB_Descriptor_ConfigurationCDC_t PROGMEM ConfigurationDescriptorSerial =
 122:Descriptors.c ****  {
 123:Descriptors.c ****      .Config = 
 124:Descriptors.c ****          {
 125:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Typ
 126:Descriptors.c ****  
 127:Descriptors.c ****              .TotalConfigurationSize = sizeof(USB_Descriptor_ConfigurationCDC_t),
 128:Descriptors.c ****              .TotalInterfaces        = 2,
 129:Descriptors.c ****                  
 130:Descriptors.c ****              .ConfigurationNumber    = 1,
 131:Descriptors.c ****              .ConfigurationStrIndex  = NO_DESCRIPTOR,
 132:Descriptors.c ****                  
 133:Descriptors.c ****              .ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 134:Descriptors.c ****              
 135:Descriptors.c ****              .MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 136:Descriptors.c ****          },
 137:Descriptors.c ****          
 138:Descriptors.c ****      .CDC_CCI_Interface = 
 139:Descriptors.c ****          {
 140:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_I
 141:Descriptors.c ****  
 142:Descriptors.c ****              .InterfaceNumber        = 0,
 143:Descriptors.c ****              .AlternateSetting       = 0,
 144:Descriptors.c ****              
 145:Descriptors.c ****              .TotalEndpoints         = 1,
 146:Descriptors.c ****                  
 147:Descriptors.c ****              .Class                  = 0x02,
 148:Descriptors.c ****              .SubClass               = 0x02,
 149:Descriptors.c ****              .Protocol               = 0x01,
 150:Descriptors.c ****                  
 151:Descriptors.c ****              .InterfaceStrIndex      = NO_DESCRIPTOR
 152:Descriptors.c ****          },
 153:Descriptors.c ****  
 154:Descriptors.c ****      .CDC_Functional_IntHeader = 
 155:Descriptors.c ****          {
 156:Descriptors.c ****              .Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24}
 157:Descriptors.c ****              .SubType                = 0x00,
 158:Descriptors.c ****              
 159:Descriptors.c ****              .Data                   = {0x01, 0x10}
 160:Descriptors.c ****          },
 161:Descriptors.c ****  
 162:Descriptors.c ****      .CDC_Functional_AbstractControlManagement = 
 163:Descriptors.c ****          {
 164:Descriptors.c ****              .Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(1)), .Type = 0x24}
 165:Descriptors.c ****              .SubType                = 0x02,
 166:Descriptors.c ****              
 167:Descriptors.c ****              .Data                   = {0x06}
 168:Descriptors.c ****          },
 169:Descriptors.c ****          
 170:Descriptors.c ****      .CDC_Functional_Union = 
 171:Descriptors.c ****          {
 172:Descriptors.c ****              .Header                 = {.Size = sizeof(CDC_FUNCTIONAL_DESCRIPTOR(2)), .Type = 0x24}
 173:Descriptors.c ****              .SubType                = 0x06,
 174:Descriptors.c ****              
 175:Descriptors.c ****              .Data                   = {0x00, 0x01}
 176:Descriptors.c ****          },
 177:Descriptors.c ****  
 178:Descriptors.c ****      .CDC_NotificationEndpoint = 
 179:Descriptors.c ****          {
 180:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 181:Descriptors.c ****              
 182:Descriptors.c ****              .EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_NOTIFICATION_EPNUM),
 183:Descriptors.c ****              .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 184:Descriptors.c ****              .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 185:Descriptors.c ****              .PollingIntervalMS      = 0xFF
 186:Descriptors.c ****          },
 187:Descriptors.c ****  
 188:Descriptors.c ****      .CDC_DCI_Interface = 
 189:Descriptors.c ****          {
 190:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_I
 191:Descriptors.c ****  
 192:Descriptors.c ****              .InterfaceNumber        = 1,
 193:Descriptors.c ****              .AlternateSetting       = 0,
 194:Descriptors.c ****              
 195:Descriptors.c ****              .TotalEndpoints         = 2,
 196:Descriptors.c ****                  
 197:Descriptors.c ****              .Class                  = 0x0A,
 198:Descriptors.c ****              .SubClass               = 0x00,
 199:Descriptors.c ****              .Protocol               = 0x00,
 200:Descriptors.c ****                  
 201:Descriptors.c ****              .InterfaceStrIndex      = NO_DESCRIPTOR
 202:Descriptors.c ****          },
 203:Descriptors.c ****  
 204:Descriptors.c ****      .CDC_DataOutEndpoint = 
 205:Descriptors.c ****          {
 206:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 207:Descriptors.c ****              
 208:Descriptors.c ****              .EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | CDC_RX_EPNUM),
 209:Descriptors.c ****              .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 210:Descriptors.c ****              .EndpointSize           = CDC_TXRX_EPSIZE,
 211:Descriptors.c ****              .PollingIntervalMS      = 0x01
 212:Descriptors.c ****          },
 213:Descriptors.c ****          
 214:Descriptors.c ****      .CDC_DataInEndpoint = 
 215:Descriptors.c ****          {
 216:Descriptors.c ****              .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 217:Descriptors.c ****              
 218:Descriptors.c ****              .EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | CDC_TX_EPNUM),
 219:Descriptors.c ****              .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 220:Descriptors.c ****              .EndpointSize           = CDC_TXRX_EPSIZE,
 221:Descriptors.c ****              .PollingIntervalMS      = 0x01
 222:Descriptors.c ****          }
 223:Descriptors.c ****  };
 224:Descriptors.c ****  
 225:Descriptors.c ****  /* for MIDI */
 226:Descriptors.c ****  const USB_Descriptor_ConfigurationMIDI_t PROGMEM ConfigurationDescriptorMIDI =
 227:Descriptors.c ****  {
 228:Descriptors.c ****      .Config = 
 229:Descriptors.c ****          {
 230:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .T
 231:Descriptors.c ****  
 232:Descriptors.c ****              .TotalConfigurationSize   = sizeof(USB_Descriptor_ConfigurationMIDI_t),
 233:Descriptors.c ****              .TotalInterfaces          = 2,
 234:Descriptors.c ****  
 235:Descriptors.c ****              .ConfigurationNumber      = 1,
 236:Descriptors.c ****              .ConfigurationStrIndex    = NO_DESCRIPTOR,
 237:Descriptors.c ****                  
 238:Descriptors.c ****              .ConfigAttributes         = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED)
 239:Descriptors.c ****              
 240:Descriptors.c ****              .MaxPowerConsumption      = USB_CONFIG_POWER_MA(100)
 241:Descriptors.c ****          },
 242:Descriptors.c ****          
 243:Descriptors.c ****      .Audio_ControlInterface = 
 244:Descriptors.c ****          {
 245:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE
 246:Descriptors.c ****  
 247:Descriptors.c ****              .InterfaceNumber          = 0,
 248:Descriptors.c ****              .AlternateSetting         = 0,
 249:Descriptors.c ****              
 250:Descriptors.c ****              .TotalEndpoints           = 0,
 251:Descriptors.c ****                  
 252:Descriptors.c ****              .Class                    = 0x01,
 253:Descriptors.c ****              .SubClass                 = 0x01,
 254:Descriptors.c ****              .Protocol                 = 0x00,
 255:Descriptors.c ****                  
 256:Descriptors.c ****              .InterfaceStrIndex        = NO_DESCRIPTOR
 257:Descriptors.c ****          },
 258:Descriptors.c ****      
 259:Descriptors.c ****      .Audio_ControlInterface_SPC = 
 260:Descriptors.c ****          {
 261:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_Audio_Interface_AC_t), .Type = DTYPE_A
 262:Descriptors.c ****              .Subtype                  = DSUBTYPE_Header,
 263:Descriptors.c ****              
 264:Descriptors.c ****              .ACSpecification          = VERSION_BCD(01.00),
 265:Descriptors.c ****              .TotalLength              = sizeof(USB_Audio_Interface_AC_t),
 266:Descriptors.c ****              
 267:Descriptors.c ****              .InCollection             = 1,
 268:Descriptors.c ****              .InterfaceNumbers         = {1},
 269:Descriptors.c ****          },
 270:Descriptors.c ****  
 271:Descriptors.c ****      .Audio_StreamInterface = 
 272:Descriptors.c ****          {
 273:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE
 274:Descriptors.c ****  
 275:Descriptors.c ****              .InterfaceNumber          = 1,
 276:Descriptors.c ****              .AlternateSetting         = 0,
 277:Descriptors.c ****              
 278:Descriptors.c ****              .TotalEndpoints           = 2,
 279:Descriptors.c ****                  
 280:Descriptors.c ****              .Class                    = 0x01,
 281:Descriptors.c ****              .SubClass                 = 0x03,
 282:Descriptors.c ****              .Protocol                 = 0x00,
 283:Descriptors.c ****                  
 284:Descriptors.c ****              .InterfaceStrIndex        = NO_DESCRIPTOR
 285:Descriptors.c ****          },
 286:Descriptors.c ****          
 287:Descriptors.c ****      .Audio_StreamInterface_SPC = 
 288:Descriptors.c ****          {
 289:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_AudioInterface_AS_t), .Type = DTY
 290:Descriptors.c ****              .Subtype                  = DSUBTYPE_General,
 291:Descriptors.c ****  
 292:Descriptors.c ****              .AudioSpecification       = VERSION_BCD(01.00),
 293:Descriptors.c ****              
 294:Descriptors.c ****              .TotalLength              = (sizeof(USB_Descriptor_ConfigurationMIDI_t) -
 295:Descriptors.c ****                                           offsetof(USB_Descriptor_ConfigurationMIDI_t, Audio_Stream
 296:Descriptors.c ****          },
 297:Descriptors.c ****  
 298:Descriptors.c ****      .MIDI_In_Jack_Emb = 
 299:Descriptors.c ****          {
 300:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_In_Jack_t), .Type = DTYPE_AudioIn
 301:Descriptors.c ****              .Subtype                  = DSUBTYPE_InputJack,
 302:Descriptors.c ****              
 303:Descriptors.c ****              .JackType                 = MIDI_JACKTYPE_EMBEDDED,
 304:Descriptors.c ****              .JackID                   = 0x01,
 305:Descriptors.c ****              
 306:Descriptors.c ****              .JackStrIndex             = NO_DESCRIPTOR
 307:Descriptors.c ****          },
 308:Descriptors.c ****  
 309:Descriptors.c ****      .MIDI_In_Jack_Ext = 
 310:Descriptors.c ****          {
 311:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_In_Jack_t), .Type = DTYPE_AudioIn
 312:Descriptors.c ****              .Subtype                  = DSUBTYPE_InputJack,
 313:Descriptors.c ****              
 314:Descriptors.c ****              .JackType                 = MIDI_JACKTYPE_EXTERNAL,
 315:Descriptors.c ****              .JackID                   = 0x02,
 316:Descriptors.c ****              
 317:Descriptors.c ****              .JackStrIndex             = NO_DESCRIPTOR
 318:Descriptors.c ****          },
 319:Descriptors.c ****          
 320:Descriptors.c ****      .MIDI_Out_Jack_Emb = 
 321:Descriptors.c ****          {
 322:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_Out_Jack_t), .Type = DTYPE_AudioI
 323:Descriptors.c ****              .Subtype                  = DSUBTYPE_OutputJack,
 324:Descriptors.c ****              
 325:Descriptors.c ****              .JackType                 = MIDI_JACKTYPE_EMBEDDED,
 326:Descriptors.c ****              .JackID                   = 0x03,
 327:Descriptors.c ****  
 328:Descriptors.c ****              .NumberOfPins             = 1,
 329:Descriptors.c ****              .SourceJackID             = {0x02},
 330:Descriptors.c ****              .SourcePinID              = {0x01},
 331:Descriptors.c ****              
 332:Descriptors.c ****              .JackStrIndex             = NO_DESCRIPTOR
 333:Descriptors.c ****          },
 334:Descriptors.c ****  
 335:Descriptors.c ****      .MIDI_Out_Jack_Ext = 
 336:Descriptors.c ****          {
 337:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_Out_Jack_t), .Type = DTYPE_AudioI
 338:Descriptors.c ****              .Subtype                  = DSUBTYPE_OutputJack,
 339:Descriptors.c ****              
 340:Descriptors.c ****              .JackType                 = MIDI_JACKTYPE_EXTERNAL,
 341:Descriptors.c ****              .JackID                   = 0x04,
 342:Descriptors.c ****  
 343:Descriptors.c ****              .NumberOfPins             = 1,
 344:Descriptors.c ****              .SourceJackID             = {0x01},
 345:Descriptors.c ****              .SourcePinID              = {0x01},
 346:Descriptors.c ****              
 347:Descriptors.c ****              .JackStrIndex             = NO_DESCRIPTOR
 348:Descriptors.c ****          },
 349:Descriptors.c ****  
 350:Descriptors.c ****      .MIDI_In_Jack_Endpoint = 
 351:Descriptors.c ****          {
 352:Descriptors.c ****              .Endpoint = 
 353:Descriptors.c ****                  {
 354:Descriptors.c ****                      .Header              = {.Size = sizeof(USB_Audio_StreamEndpoint_Std_t), .Type 
 355:Descriptors.c ****  
 356:Descriptors.c ****                      .EndpointAddress     = (ENDPOINT_DESCRIPTOR_DIR_OUT | MIDI_STREAM_OUT_EPNUM),
 357:Descriptors.c ****                      .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 358:Descriptors.c ****                      .EndpointSize        = MIDI_STREAM_EPSIZE,
 359:Descriptors.c ****                      .PollingIntervalMS   = 0
 360:Descriptors.c ****                  },
 361:Descriptors.c ****              
 362:Descriptors.c ****              .Refresh                  = 0,
 363:Descriptors.c ****              .SyncEndpointNumber       = 0
 364:Descriptors.c ****          },
 365:Descriptors.c ****          
 366:Descriptors.c ****      .MIDI_In_Jack_Endpoint_SPC = 
 367:Descriptors.c ****          {
 368:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_Jack_Endpoint_t), .Type = DTYPE_A
 369:Descriptors.c ****              .Subtype                  = DSUBTYPE_General,
 370:Descriptors.c ****  
 371:Descriptors.c ****              .TotalEmbeddedJacks       = 0x01,
 372:Descriptors.c ****              .AssociatedJackID         = {0x01}
 373:Descriptors.c ****          },
 374:Descriptors.c ****  
 375:Descriptors.c ****      .MIDI_Out_Jack_Endpoint = 
 376:Descriptors.c ****          {
 377:Descriptors.c ****              .Endpoint = 
 378:Descriptors.c ****                  {
 379:Descriptors.c ****                      .Header              = {.Size = sizeof(USB_Audio_StreamEndpoint_Std_t), .Type 
 380:Descriptors.c ****  
 381:Descriptors.c ****                      .EndpointAddress     = (ENDPOINT_DESCRIPTOR_DIR_IN | MIDI_STREAM_IN_EPNUM),
 382:Descriptors.c ****                      .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 383:Descriptors.c ****                      .EndpointSize        = MIDI_STREAM_EPSIZE,
 384:Descriptors.c ****                      .PollingIntervalMS   = 0
 385:Descriptors.c ****                  },
 386:Descriptors.c ****              
 387:Descriptors.c ****              .Refresh                  = 0,
 388:Descriptors.c ****              .SyncEndpointNumber       = 0
 389:Descriptors.c ****          },
 390:Descriptors.c ****          
 391:Descriptors.c ****      .MIDI_Out_Jack_Endpoint_SPC = 
 392:Descriptors.c ****          {
 393:Descriptors.c ****              .Header                   = {.Size = sizeof(USB_MIDI_Jack_Endpoint_t), .Type = DTYPE_A
 394:Descriptors.c ****              .Subtype                  = DSUBTYPE_General,
 395:Descriptors.c ****  
 396:Descriptors.c ****              .TotalEmbeddedJacks       = 0x01,
 397:Descriptors.c ****              .AssociatedJackID         = {0x03}
 398:Descriptors.c ****          }
 399:Descriptors.c ****  };
 400:Descriptors.c ****  
 401:Descriptors.c ****  /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the 
 402:Descriptors.c ****   *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit intege
 403:Descriptors.c ****   *  via the language ID table available at USB.org what languages the device supports for its stri
 404:Descriptors.c ****   */
 405:Descriptors.c ****  const USB_Descriptor_String_t PROGMEM LanguageString =
 406:Descriptors.c ****  {
 407:Descriptors.c ****      .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 408:Descriptors.c ****          
 409:Descriptors.c ****      .UnicodeString          = {LANGUAGE_ID_ENG}
 410:Descriptors.c ****  };
 411:Descriptors.c ****  
 412:Descriptors.c ****  /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details
 413:Descriptors.c ****   *  form, and is read out upon request by the host when the appropriate string ID is requested, li
 414:Descriptors.c ****   *  Descriptor.
 415:Descriptors.c ****   */
 416:Descriptors.c ****  /* for Serial */
 417:Descriptors.c ****  const USB_Descriptor_String_t PROGMEM ManufacturerStringSerial =
 418:Descriptors.c ****  {
 419:Descriptors.c ****      .Header                 = {.Size = USB_STRING_LEN(24), .Type = DTYPE_String},
 420:Descriptors.c ****          
 421:Descriptors.c ****      .UnicodeString          = { 'A', 'r', 'd', 'u', 'i', 'n', 'o', ' ', '(', 'w', 'w', 'w', '.', '
 422:Descriptors.c ****  };
 423:Descriptors.c ****  
 424:Descriptors.c ****  /* for MIDI */
 425:Descriptors.c ****  const USB_Descriptor_String_t PROGMEM ManufacturerStringMIDI =
 426:Descriptors.c ****  {
 427:Descriptors.c ****      .Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 428:Descriptors.c ****  
 429:Descriptors.c ****      .UnicodeString          = { 'k', 'u', 'w', 'a', 't', 'a', 'y', '@', 'n', 'i', 'f', 't', 'y', '
 430:Descriptors.c ****  };
 431:Descriptors.c ****  /** Product descriptor string. This is a Unicode string containing the product's details in human 
 432:Descriptors.c ****   *  and is read out upon request by the host when the appropriate string ID is requested, listed i
 433:Descriptors.c ****   *  Descriptor.
 434:Descriptors.c ****   */
 435:Descriptors.c ****  /* for Serial */
 436:Descriptors.c ****  const USB_Descriptor_String_t PROGMEM ProductStringSerial =
 437:Descriptors.c ****  {
 438:Descriptors.c ****      #if (ARDUINO_MODEL_PID == ARDUINO_UNO_PID)
 439:Descriptors.c ****          .Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 440:Descriptors.c ****              
 441:Descriptors.c ****          .UnicodeString          = { 'A', 'r', 'd', 'u', 'i', 'n', 'o', ' ', 'U', 'n', 'o' }
 442:Descriptors.c ****      #elif (ARDUINO_MODEL_PID == ARDUINO_MEGA2560_PID)
 443:Descriptors.c ****          .Header                 = {.Size = USB_STRING_LEN(17), .Type = DTYPE_String},
 444:Descriptors.c ****              
 445:Descriptors.c ****          .UnicodeString          = { 'A', 'r', 'd', 'u', 'i', 'n', 'o', ' ', 'M', 'e', 'g', 'a', ' 
 446:Descriptors.c ****      #elif (ARDUINO_MODEL_PID == ATMEL_LUFA_DEMO_PID)
 447:Descriptors.c ****          .Header                 = {.Size = USB_STRING_LEN(14), .Type = DTYPE_String},
 448:Descriptors.c ****              
 449:Descriptors.c ****          .UnicodeString          = L"Lufa USBSerial"
 450:Descriptors.c ****      #endif
 451:Descriptors.c ****      
 452:Descriptors.c ****  };
 453:Descriptors.c ****  /* for MIDI */
 454:Descriptors.c ****  const USB_Descriptor_String_t PROGMEM ProductStringMIDI = {
 455:Descriptors.c ****     .Header                 = {.Size = USB_STRING_LEN(2), .Type = DTYPE_String},
 456:Descriptors.c ****     .UnicodeString          = { 'E', 'A' }
 457:Descriptors.c **** };
 458:Descriptors.c ****  
 459:Descriptors.c ****  /** This function is called by the library when in device mode, and must be overridden (see librar
 460:Descriptors.c ****   *  documentation) by the application code so that the address and size of a requested descriptor 
 461:Descriptors.c ****   *  to the USB library. When the device receives a Get Descriptor request on the control endpoint,
 462:Descriptors.c ****   *  is called so that the descriptor details can be passed back and the appropriate descriptor sen
 463:Descriptors.c ****   *  USB host.
 464:Descriptors.c ****   */
 465:Descriptors.c ****  uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 466:Descriptors.c ****                                      const uint8_t wIndex,
 467:Descriptors.c ****                                      void** const DescriptorAddress)
 468:Descriptors.c ****  {
  17               		.loc 1 468 2 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 468 2 is_stmt 0 view .LVU1
  24 0000 9C01      		movw r18,r24
  25 0002 DA01      		movw r26,r20
 469:Descriptors.c ****      const uint8_t  DescriptorType   = (wValue >> 8);
  26               		.loc 1 469 6 is_stmt 1 view .LVU2
  27               		.loc 1 469 48 is_stmt 0 view .LVU3
  28 0004 832F      		mov r24,r19
  29 0006 9927      		clr r25
  30               	.LVL1:
 470:Descriptors.c ****      const uint8_t  DescriptorNumber = (wValue & 0xFF);
  31               		.loc 1 470 6 is_stmt 1 view .LVU4
 471:Descriptors.c ****  
 472:Descriptors.c ****      void*    Address = NULL;
  32               		.loc 1 472 6 view .LVU5
 473:Descriptors.c ****      uint16_t Size    = NO_DESCRIPTOR;
  33               		.loc 1 473 6 view .LVU6
 474:Descriptors.c ****  
 475:Descriptors.c ****      switch (DescriptorType)
  34               		.loc 1 475 6 view .LVU7
  35 0008 8230      		cpi r24,2
  36 000a 9105      		cpc r25,__zero_reg__
  37 000c 01F0      		breq .L2
  38 000e 8330      		cpi r24,3
  39 0010 9105      		cpc r25,__zero_reg__
  40 0012 01F0      		breq .L3
  41 0014 0197      		sbiw r24,1
  42 0016 01F0      		breq .+2
  43 0018 00C0      		rjmp .L12
 476:Descriptors.c ****      {
 477:Descriptors.c ****          case DTYPE_Device: 
 478:Descriptors.c ****            if (mocoMode == 1) {
  44               		.loc 1 478 12 view .LVU8
  45               		.loc 1 478 15 is_stmt 0 view .LVU9
  46 001a 8091 0000 		lds r24,mocoMode
  47               	.LVL2:
  48               		.loc 1 478 15 view .LVU10
  49 001e 8130      		cpi r24,lo8(1)
  50 0020 01F4      		brne .+2
  51 0022 00C0      		rjmp .L10
 479:Descriptors.c ****              Address = (void*)&DeviceDescriptorMIDI;
 480:Descriptors.c ****              Size    = sizeof(USB_Descriptor_Device_t);
 481:Descriptors.c ****            } else {
 482:Descriptors.c ****              Address = (void*)&DeviceDescriptorSerial;
 483:Descriptors.c ****              Size    = sizeof(USB_Descriptor_Device_t);
  52               		.loc 1 483 22 view .LVU11
  53 0024 82E1      		ldi r24,lo8(18)
  54 0026 90E0      		ldi r25,0
 482:Descriptors.c ****              Size    = sizeof(USB_Descriptor_Device_t);
  55               		.loc 1 482 22 view .LVU12
  56 0028 20E0      		ldi r18,lo8(DeviceDescriptorSerial)
  57 002a 30E0      		ldi r19,hi8(DeviceDescriptorSerial)
  58               	.LVL3:
  59               	.L4:
 484:Descriptors.c ****            }
 485:Descriptors.c ****              break;
 486:Descriptors.c ****          case DTYPE_Configuration: 
 487:Descriptors.c ****            if (mocoMode == 1) {
 488:Descriptors.c ****              Address = (void*)&ConfigurationDescriptorMIDI;
 489:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationMIDI_t);
 490:Descriptors.c ****            } else {
 491:Descriptors.c ****              Address = (void*)&ConfigurationDescriptorSerial;
 492:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationCDC_t);
 493:Descriptors.c ****            }
 494:Descriptors.c ****              break;
 495:Descriptors.c ****          case DTYPE_String: 
 496:Descriptors.c ****              switch (DescriptorNumber)
 497:Descriptors.c ****              {
 498:Descriptors.c ****                  case 0x00:
 499:Descriptors.c ****                      Address = (void*)&LanguageString;
 500:Descriptors.c ****                      Size    = pgm_read_byte(&LanguageString.Header.Size);
 501:Descriptors.c ****                      break;
 502:Descriptors.c ****                  case 0x01:
 503:Descriptors.c ****                    if (mocoMode == 1) {
 504:Descriptors.c ****                      Address = (void*)&ManufacturerStringMIDI;
 505:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringMIDI.Header.Size);
 506:Descriptors.c ****                    } else {
 507:Descriptors.c ****                      Address = (void*)&ManufacturerStringSerial;
 508:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringSerial.Header.Size);
 509:Descriptors.c ****                    }
 510:Descriptors.c ****                      break;
 511:Descriptors.c ****                  case 0x02:
 512:Descriptors.c ****                    if (mocoMode == 1) {
 513:Descriptors.c ****                      Address = (void*)&ProductStringMIDI;
 514:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringMIDI.Header.Size);
 515:Descriptors.c ****                    } else {
 516:Descriptors.c ****                      Address = (void*)&ProductStringSerial;
 517:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
 518:Descriptors.c ****                    }
 519:Descriptors.c ****                      break;
 520:Descriptors.c ****              }
 521:Descriptors.c ****              
 522:Descriptors.c ****              break;
 523:Descriptors.c ****      }
 524:Descriptors.c ****      
 525:Descriptors.c ****      *DescriptorAddress = Address;
  60               		.loc 1 525 6 is_stmt 1 view .LVU13
  61               		.loc 1 525 25 is_stmt 0 view .LVU14
  62 002c 2D93      		st X+,r18
  63 002e 3C93      		st X,r19
 526:Descriptors.c ****      return Size;
  64               		.loc 1 526 6 is_stmt 1 view .LVU15
  65               	/* epilogue start */
 527:Descriptors.c ****  }
  66               		.loc 1 527 2 is_stmt 0 view .LVU16
  67 0030 0895      		ret
  68               	.LVL4:
  69               	.L2:
 487:Descriptors.c ****              Address = (void*)&ConfigurationDescriptorMIDI;
  70               		.loc 1 487 12 is_stmt 1 view .LVU17
 487:Descriptors.c ****              Address = (void*)&ConfigurationDescriptorMIDI;
  71               		.loc 1 487 15 is_stmt 0 view .LVU18
  72 0032 8091 0000 		lds r24,mocoMode
  73               	.LVL5:
 487:Descriptors.c ****              Address = (void*)&ConfigurationDescriptorMIDI;
  74               		.loc 1 487 15 view .LVU19
  75 0036 8130      		cpi r24,lo8(1)
  76 0038 01F4      		brne .+2
  77 003a 00C0      		rjmp .L11
 492:Descriptors.c ****            }
  78               		.loc 1 492 22 view .LVU20
  79 003c 8EE3      		ldi r24,lo8(62)
  80 003e 90E0      		ldi r25,0
 491:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationCDC_t);
  81               		.loc 1 491 22 view .LVU21
  82 0040 20E0      		ldi r18,lo8(ConfigurationDescriptorSerial)
  83 0042 30E0      		ldi r19,hi8(ConfigurationDescriptorSerial)
  84               	.LVL6:
 491:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationCDC_t);
  85               		.loc 1 491 22 view .LVU22
  86 0044 00C0      		rjmp .L4
  87               	.LVL7:
  88               	.L3:
 496:Descriptors.c ****              {
  89               		.loc 1 496 14 is_stmt 1 view .LVU23
  90 0046 C901      		movw r24,r18
  91               	.LVL8:
 496:Descriptors.c ****              {
  92               		.loc 1 496 14 is_stmt 0 view .LVU24
  93 0048 9927      		clr r25
  94 004a 2130      		cpi r18,lo8(1)
  95 004c 01F0      		breq .L5
  96 004e 8230      		cpi r24,2
  97 0050 9105      		cpc r25,__zero_reg__
  98 0052 01F0      		breq .L6
  99 0054 892B      		or r24,r25
 100 0056 01F0      		breq .+2
 101 0058 00C0      		rjmp .L12
 499:Descriptors.c ****                      Size    = pgm_read_byte(&LanguageString.Header.Size);
 102               		.loc 1 499 22 is_stmt 1 view .LVU25
 103               	.LVL9:
 500:Descriptors.c ****                      break;
 104               		.loc 1 500 22 view .LVU26
 105               	.LBB2:
 500:Descriptors.c ****                      break;
 106               		.loc 1 500 32 view .LVU27
 500:Descriptors.c ****                      break;
 107               		.loc 1 500 32 view .LVU28
 500:Descriptors.c ****                      break;
 108               		.loc 1 500 32 view .LVU29
 109 005a E0E0      		ldi r30,lo8(LanguageString)
 110 005c F0E0      		ldi r31,hi8(LanguageString)
 111               	/* #APP */
 112               	 ;  500 "Descriptors.c" 1
 113 005e E491      		lpm r30, Z
 114               		
 115               	 ;  0 "" 2
 116               	.LVL10:
 500:Descriptors.c ****                      break;
 117               		.loc 1 500 32 view .LVU30
 118               	/* #NOAPP */
 119               	.LBE2:
 500:Descriptors.c ****                      break;
 120               		.loc 1 500 30 is_stmt 0 view .LVU31
 121 0060 8E2F      		mov r24,r30
 122 0062 90E0      		ldi r25,0
 123               	.LVL11:
 501:Descriptors.c ****                  case 0x01:
 124               		.loc 1 501 22 is_stmt 1 view .LVU32
 499:Descriptors.c ****                      Size    = pgm_read_byte(&LanguageString.Header.Size);
 125               		.loc 1 499 30 is_stmt 0 view .LVU33
 126 0064 20E0      		ldi r18,lo8(LanguageString)
 127 0066 30E0      		ldi r19,hi8(LanguageString)
 128               	.LVL12:
 501:Descriptors.c ****                  case 0x01:
 129               		.loc 1 501 22 view .LVU34
 130 0068 00C0      		rjmp .L4
 131               	.LVL13:
 132               	.L5:
 503:Descriptors.c ****                      Address = (void*)&ManufacturerStringMIDI;
 133               		.loc 1 503 20 is_stmt 1 view .LVU35
 503:Descriptors.c ****                      Address = (void*)&ManufacturerStringMIDI;
 134               		.loc 1 503 23 is_stmt 0 view .LVU36
 135 006a 8091 0000 		lds r24,mocoMode
 136 006e 8130      		cpi r24,lo8(1)
 137 0070 01F4      		brne .L7
 504:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringMIDI.Header.Size);
 138               		.loc 1 504 22 is_stmt 1 view .LVU37
 139               	.LVL14:
 505:Descriptors.c ****                    } else {
 140               		.loc 1 505 22 view .LVU38
 141               	.LBB3:
 505:Descriptors.c ****                    } else {
 142               		.loc 1 505 32 view .LVU39
 505:Descriptors.c ****                    } else {
 143               		.loc 1 505 32 view .LVU40
 505:Descriptors.c ****                    } else {
 144               		.loc 1 505 32 view .LVU41
 145 0072 E0E0      		ldi r30,lo8(ManufacturerStringMIDI)
 146 0074 F0E0      		ldi r31,hi8(ManufacturerStringMIDI)
 147               	/* #APP */
 148               	 ;  505 "Descriptors.c" 1
 149 0076 E491      		lpm r30, Z
 150               		
 151               	 ;  0 "" 2
 152               	.LVL15:
 505:Descriptors.c ****                    } else {
 153               		.loc 1 505 32 view .LVU42
 154               	/* #NOAPP */
 155               	.LBE3:
 505:Descriptors.c ****                    } else {
 156               		.loc 1 505 30 is_stmt 0 view .LVU43
 157 0078 8E2F      		mov r24,r30
 158 007a 90E0      		ldi r25,0
 159               	.LVL16:
 504:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringMIDI.Header.Size);
 160               		.loc 1 504 30 view .LVU44
 161 007c 20E0      		ldi r18,lo8(ManufacturerStringMIDI)
 162 007e 30E0      		ldi r19,hi8(ManufacturerStringMIDI)
 163               	.LVL17:
 504:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringMIDI.Header.Size);
 164               		.loc 1 504 30 view .LVU45
 165 0080 00C0      		rjmp .L4
 166               	.LVL18:
 167               	.L7:
 507:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringSerial.Header.Size);
 168               		.loc 1 507 22 is_stmt 1 view .LVU46
 508:Descriptors.c ****                    }
 169               		.loc 1 508 22 view .LVU47
 170               	.LBB4:
 508:Descriptors.c ****                    }
 171               		.loc 1 508 32 view .LVU48
 508:Descriptors.c ****                    }
 172               		.loc 1 508 32 view .LVU49
 508:Descriptors.c ****                    }
 173               		.loc 1 508 32 view .LVU50
 174 0082 E0E0      		ldi r30,lo8(ManufacturerStringSerial)
 175 0084 F0E0      		ldi r31,hi8(ManufacturerStringSerial)
 176               	/* #APP */
 177               	 ;  508 "Descriptors.c" 1
 178 0086 E491      		lpm r30, Z
 179               		
 180               	 ;  0 "" 2
 181               	.LVL19:
 508:Descriptors.c ****                    }
 182               		.loc 1 508 32 view .LVU51
 183               	/* #NOAPP */
 184               	.LBE4:
 508:Descriptors.c ****                    }
 185               		.loc 1 508 30 is_stmt 0 view .LVU52
 186 0088 8E2F      		mov r24,r30
 187 008a 90E0      		ldi r25,0
 188               	.LVL20:
 507:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringSerial.Header.Size);
 189               		.loc 1 507 30 view .LVU53
 190 008c 20E0      		ldi r18,lo8(ManufacturerStringSerial)
 191 008e 30E0      		ldi r19,hi8(ManufacturerStringSerial)
 192               	.LVL21:
 507:Descriptors.c ****                      Size    = pgm_read_byte(&ManufacturerStringSerial.Header.Size);
 193               		.loc 1 507 30 view .LVU54
 194 0090 00C0      		rjmp .L4
 195               	.LVL22:
 196               	.L6:
 512:Descriptors.c ****                      Address = (void*)&ProductStringMIDI;
 197               		.loc 1 512 20 is_stmt 1 view .LVU55
 512:Descriptors.c ****                      Address = (void*)&ProductStringMIDI;
 198               		.loc 1 512 23 is_stmt 0 view .LVU56
 199 0092 8091 0000 		lds r24,mocoMode
 200 0096 8130      		cpi r24,lo8(1)
 201 0098 01F4      		brne .L8
 513:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringMIDI.Header.Size);
 202               		.loc 1 513 22 is_stmt 1 view .LVU57
 203               	.LVL23:
 514:Descriptors.c ****                    } else {
 204               		.loc 1 514 22 view .LVU58
 205               	.LBB5:
 514:Descriptors.c ****                    } else {
 206               		.loc 1 514 32 view .LVU59
 514:Descriptors.c ****                    } else {
 207               		.loc 1 514 32 view .LVU60
 514:Descriptors.c ****                    } else {
 208               		.loc 1 514 32 view .LVU61
 209 009a E0E0      		ldi r30,lo8(ProductStringMIDI)
 210 009c F0E0      		ldi r31,hi8(ProductStringMIDI)
 211               	/* #APP */
 212               	 ;  514 "Descriptors.c" 1
 213 009e E491      		lpm r30, Z
 214               		
 215               	 ;  0 "" 2
 216               	.LVL24:
 514:Descriptors.c ****                    } else {
 217               		.loc 1 514 32 view .LVU62
 218               	/* #NOAPP */
 219               	.LBE5:
 514:Descriptors.c ****                    } else {
 220               		.loc 1 514 30 is_stmt 0 view .LVU63
 221 00a0 8E2F      		mov r24,r30
 222 00a2 90E0      		ldi r25,0
 223               	.LVL25:
 513:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringMIDI.Header.Size);
 224               		.loc 1 513 30 view .LVU64
 225 00a4 20E0      		ldi r18,lo8(ProductStringMIDI)
 226 00a6 30E0      		ldi r19,hi8(ProductStringMIDI)
 227               	.LVL26:
 513:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringMIDI.Header.Size);
 228               		.loc 1 513 30 view .LVU65
 229 00a8 00C0      		rjmp .L4
 230               	.LVL27:
 231               	.L8:
 516:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
 232               		.loc 1 516 22 is_stmt 1 view .LVU66
 517:Descriptors.c ****                    }
 233               		.loc 1 517 22 view .LVU67
 234               	.LBB6:
 517:Descriptors.c ****                    }
 235               		.loc 1 517 32 view .LVU68
 517:Descriptors.c ****                    }
 236               		.loc 1 517 32 view .LVU69
 517:Descriptors.c ****                    }
 237               		.loc 1 517 32 view .LVU70
 238 00aa E0E0      		ldi r30,lo8(ProductStringSerial)
 239 00ac F0E0      		ldi r31,hi8(ProductStringSerial)
 240               	/* #APP */
 241               	 ;  517 "Descriptors.c" 1
 242 00ae E491      		lpm r30, Z
 243               		
 244               	 ;  0 "" 2
 245               	.LVL28:
 517:Descriptors.c ****                    }
 246               		.loc 1 517 32 view .LVU71
 247               	/* #NOAPP */
 248               	.LBE6:
 517:Descriptors.c ****                    }
 249               		.loc 1 517 30 is_stmt 0 view .LVU72
 250 00b0 8E2F      		mov r24,r30
 251 00b2 90E0      		ldi r25,0
 252               	.LVL29:
 516:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
 253               		.loc 1 516 30 view .LVU73
 254 00b4 20E0      		ldi r18,lo8(ProductStringSerial)
 255 00b6 30E0      		ldi r19,hi8(ProductStringSerial)
 256               	.LVL30:
 516:Descriptors.c ****                      Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
 257               		.loc 1 516 30 view .LVU74
 258 00b8 00C0      		rjmp .L4
 259               	.LVL31:
 260               	.L10:
 480:Descriptors.c ****            } else {
 261               		.loc 1 480 22 view .LVU75
 262 00ba 82E1      		ldi r24,lo8(18)
 263 00bc 90E0      		ldi r25,0
 479:Descriptors.c ****              Size    = sizeof(USB_Descriptor_Device_t);
 264               		.loc 1 479 22 view .LVU76
 265 00be 20E0      		ldi r18,lo8(DeviceDescriptorMIDI)
 266 00c0 30E0      		ldi r19,hi8(DeviceDescriptorMIDI)
 267               	.LVL32:
 479:Descriptors.c ****              Size    = sizeof(USB_Descriptor_Device_t);
 268               		.loc 1 479 22 view .LVU77
 269 00c2 00C0      		rjmp .L4
 270               	.LVL33:
 271               	.L11:
 489:Descriptors.c ****            } else {
 272               		.loc 1 489 22 view .LVU78
 273 00c4 85E6      		ldi r24,lo8(101)
 274 00c6 90E0      		ldi r25,0
 488:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationMIDI_t);
 275               		.loc 1 488 22 view .LVU79
 276 00c8 20E0      		ldi r18,lo8(ConfigurationDescriptorMIDI)
 277 00ca 30E0      		ldi r19,hi8(ConfigurationDescriptorMIDI)
 278               	.LVL34:
 488:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationMIDI_t);
 279               		.loc 1 488 22 view .LVU80
 280 00cc 00C0      		rjmp .L4
 281               	.LVL35:
 282               	.L12:
 488:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationMIDI_t);
 283               		.loc 1 488 22 view .LVU81
 284 00ce 90E0      		ldi r25,0
 285 00d0 80E0      		ldi r24,0
 286 00d2 30E0      		ldi r19,0
 287 00d4 20E0      		ldi r18,0
 288               	.LVL36:
 488:Descriptors.c ****              Size    = sizeof(USB_Descriptor_ConfigurationMIDI_t);
 289               		.loc 1 488 22 view .LVU82
 290 00d6 00C0      		rjmp .L4
 291               		.cfi_endproc
 292               	.LFE91:
 294               	.global	ProductStringMIDI
 295               		.section	.progmem.data,"a",@progbits
 298               	ProductStringMIDI:
 299 0000 06        		.byte	6
 300 0001 03        		.byte	3
 301 0002 4500      		.word	69
 302 0004 4100      		.word	65
 303               	.global	ProductStringSerial
 306               	ProductStringSerial:
 307 0006 24        		.byte	36
 308 0007 03        		.byte	3
 309 0008 4100      		.word	65
 310 000a 7200      		.word	114
 311 000c 6400      		.word	100
 312 000e 7500      		.word	117
 313 0010 6900      		.word	105
 314 0012 6E00      		.word	110
 315 0014 6F00      		.word	111
 316 0016 2000      		.word	32
 317 0018 4D00      		.word	77
 318 001a 6500      		.word	101
 319 001c 6700      		.word	103
 320 001e 6100      		.word	97
 321 0020 2000      		.word	32
 322 0022 3200      		.word	50
 323 0024 3500      		.word	53
 324 0026 3600      		.word	54
 325 0028 3000      		.word	48
 326               	.global	ManufacturerStringMIDI
 329               	ManufacturerStringMIDI:
 330 002a 24        		.byte	36
 331 002b 03        		.byte	3
 332 002c 6B00      		.word	107
 333 002e 7500      		.word	117
 334 0030 7700      		.word	119
 335 0032 6100      		.word	97
 336 0034 7400      		.word	116
 337 0036 6100      		.word	97
 338 0038 7900      		.word	121
 339 003a 4000      		.word	64
 340 003c 6E00      		.word	110
 341 003e 6900      		.word	105
 342 0040 6600      		.word	102
 343 0042 7400      		.word	116
 344 0044 7900      		.word	121
 345 0046 2E00      		.word	46
 346 0048 6300      		.word	99
 347 004a 6F00      		.word	111
 348 004c 6D00      		.word	109
 349               	.global	ManufacturerStringSerial
 352               	ManufacturerStringSerial:
 353 004e 32        		.byte	50
 354 004f 03        		.byte	3
 355 0050 4100      		.word	65
 356 0052 7200      		.word	114
 357 0054 6400      		.word	100
 358 0056 7500      		.word	117
 359 0058 6900      		.word	105
 360 005a 6E00      		.word	110
 361 005c 6F00      		.word	111
 362 005e 2000      		.word	32
 363 0060 2800      		.word	40
 364 0062 7700      		.word	119
 365 0064 7700      		.word	119
 366 0066 7700      		.word	119
 367 0068 2E00      		.word	46
 368 006a 6100      		.word	97
 369 006c 7200      		.word	114
 370 006e 6400      		.word	100
 371 0070 7500      		.word	117
 372 0072 6900      		.word	105
 373 0074 6E00      		.word	110
 374 0076 6F00      		.word	111
 375 0078 2E00      		.word	46
 376 007a 6300      		.word	99
 377 007c 6300      		.word	99
 378 007e 2900      		.word	41
 379               	.global	LanguageString
 382               	LanguageString:
 383 0080 04        		.byte	4
 384 0081 03        		.byte	3
 385 0082 0904      		.word	1033
 386               	.global	ConfigurationDescriptorMIDI
 389               	ConfigurationDescriptorMIDI:
 390 0084 09        		.byte	9
 391 0085 02        		.byte	2
 392 0086 6500      		.word	101
 393 0088 02        		.byte	2
 394 0089 01        		.byte	1
 395 008a 00        		.byte	0
 396 008b C0        		.byte	-64
 397 008c 32        		.byte	50
 398 008d 09        		.byte	9
 399 008e 04        		.byte	4
 400 008f 00        		.byte	0
 401 0090 00        		.byte	0
 402 0091 00        		.byte	0
 403 0092 01        		.byte	1
 404 0093 01        		.byte	1
 405 0094 00        		.byte	0
 406 0095 00        		.byte	0
 407 0096 09        		.byte	9
 408 0097 24        		.byte	36
 409 0098 01        		.byte	1
 410 0099 0001      		.word	256
 411 009b 0900      		.word	9
 412 009d 01        		.byte	1
 413 009e 01        		.ascii	"\001"
 414 009f 09        		.byte	9
 415 00a0 04        		.byte	4
 416 00a1 01        		.byte	1
 417 00a2 00        		.byte	0
 418 00a3 02        		.byte	2
 419 00a4 01        		.byte	1
 420 00a5 03        		.byte	3
 421 00a6 00        		.byte	0
 422 00a7 00        		.byte	0
 423 00a8 07        		.byte	7
 424 00a9 24        		.byte	36
 425 00aa 01        		.byte	1
 426 00ab 0001      		.word	256
 427 00ad 4100      		.word	65
 428 00af 06        		.byte	6
 429 00b0 24        		.byte	36
 430 00b1 02        		.byte	2
 431 00b2 01        		.byte	1
 432 00b3 01        		.byte	1
 433 00b4 00        		.byte	0
 434 00b5 06        		.byte	6
 435 00b6 24        		.byte	36
 436 00b7 02        		.byte	2
 437 00b8 02        		.byte	2
 438 00b9 02        		.byte	2
 439 00ba 00        		.byte	0
 440 00bb 09        		.byte	9
 441 00bc 24        		.byte	36
 442 00bd 03        		.byte	3
 443 00be 01        		.byte	1
 444 00bf 03        		.byte	3
 445 00c0 01        		.byte	1
 446 00c1 02        		.ascii	"\002"
 447 00c2 01        		.ascii	"\001"
 448 00c3 00        		.byte	0
 449 00c4 09        		.byte	9
 450 00c5 24        		.byte	36
 451 00c6 03        		.byte	3
 452 00c7 02        		.byte	2
 453 00c8 04        		.byte	4
 454 00c9 01        		.byte	1
 455 00ca 01        		.ascii	"\001"
 456 00cb 01        		.ascii	"\001"
 457 00cc 00        		.byte	0
 458 00cd 09        		.byte	9
 459 00ce 05        		.byte	5
 460 00cf 01        		.byte	1
 461 00d0 02        		.byte	2
 462 00d1 4000      		.word	64
 463 00d3 00        		.byte	0
 464 00d4 00        		.byte	0
 465 00d5 00        		.byte	0
 466 00d6 05        		.byte	5
 467 00d7 25        		.byte	37
 468 00d8 01        		.byte	1
 469 00d9 01        		.byte	1
 470 00da 01        		.ascii	"\001"
 471 00db 09        		.byte	9
 472 00dc 05        		.byte	5
 473 00dd 82        		.byte	-126
 474 00de 02        		.byte	2
 475 00df 4000      		.word	64
 476 00e1 00        		.byte	0
 477 00e2 00        		.byte	0
 478 00e3 00        		.byte	0
 479 00e4 05        		.byte	5
 480 00e5 25        		.byte	37
 481 00e6 01        		.byte	1
 482 00e7 01        		.byte	1
 483 00e8 03        		.ascii	"\003"
 484               	.global	ConfigurationDescriptorSerial
 487               	ConfigurationDescriptorSerial:
 488 00e9 09        		.byte	9
 489 00ea 02        		.byte	2
 490 00eb 3E00      		.word	62
 491 00ed 02        		.byte	2
 492 00ee 01        		.byte	1
 493 00ef 00        		.byte	0
 494 00f0 C0        		.byte	-64
 495 00f1 32        		.byte	50
 496 00f2 09        		.byte	9
 497 00f3 04        		.byte	4
 498 00f4 00        		.byte	0
 499 00f5 00        		.byte	0
 500 00f6 01        		.byte	1
 501 00f7 02        		.byte	2
 502 00f8 02        		.byte	2
 503 00f9 01        		.byte	1
 504 00fa 00        		.byte	0
 505 00fb 05        		.byte	5
 506 00fc 24        		.byte	36
 507 00fd 00        		.byte	0
 508 00fe 0110      		.ascii	"\001\020"
 509 0100 04        		.byte	4
 510 0101 24        		.byte	36
 511 0102 02        		.byte	2
 512 0103 06        		.ascii	"\006"
 513 0104 05        		.byte	5
 514 0105 24        		.byte	36
 515 0106 06        		.byte	6
 516 0107 00        		.string	""
 517 0108 01        		.ascii	"\001"
 518 0109 07        		.byte	7
 519 010a 05        		.byte	5
 520 010b 82        		.byte	-126
 521 010c 03        		.byte	3
 522 010d 0800      		.word	8
 523 010f FF        		.byte	-1
 524 0110 09        		.byte	9
 525 0111 04        		.byte	4
 526 0112 01        		.byte	1
 527 0113 00        		.byte	0
 528 0114 02        		.byte	2
 529 0115 0A        		.byte	10
 530 0116 00        		.byte	0
 531 0117 00        		.byte	0
 532 0118 00        		.byte	0
 533 0119 07        		.byte	7
 534 011a 05        		.byte	5
 535 011b 04        		.byte	4
 536 011c 02        		.byte	2
 537 011d 4000      		.word	64
 538 011f 01        		.byte	1
 539 0120 07        		.byte	7
 540 0121 05        		.byte	5
 541 0122 83        		.byte	-125
 542 0123 02        		.byte	2
 543 0124 4000      		.word	64
 544 0126 01        		.byte	1
 545               	.global	DeviceDescriptorMIDI
 548               	DeviceDescriptorMIDI:
 549 0127 12        		.byte	18
 550 0128 01        		.byte	1
 551 0129 1001      		.word	272
 552 012b 00        		.byte	0
 553 012c 00        		.byte	0
 554 012d 00        		.byte	0
 555 012e 08        		.byte	8
 556 012f 0DDC      		.word	-9203
 557 0131 B0C6      		.word	-14672
 558 0133 0000      		.word	0
 559 0135 01        		.byte	1
 560 0136 02        		.byte	2
 561 0137 00        		.byte	0
 562 0138 01        		.byte	1
 563               	.global	DeviceDescriptorSerial
 566               	DeviceDescriptorSerial:
 567 0139 12        		.byte	18
 568 013a 01        		.byte	1
 569 013b 1001      		.word	272
 570 013d 02        		.byte	2
 571 013e 00        		.byte	0
 572 013f 00        		.byte	0
 573 0140 08        		.byte	8
 574 0141 4123      		.word	9025
 575 0143 1000      		.word	16
 576 0145 0100      		.word	1
 577 0147 01        		.byte	1
 578 0148 02        		.byte	2
 579 0149 DC        		.byte	-36
 580 014a 01        		.byte	1
 581               		.text
 582               	.Letext0:
 583               		.file 2 "/opt/homebrew/Cellar/avr-gcc@9/9.4.0_1/avr/include/stdint.h"
 584               		.file 3 "/opt/homebrew/Cellar/avr-gcc@9/9.4.0_1/lib/avr-gcc/9/gcc/avr/9.4.0/include/stddef.h"
 585               		.file 4 "LUFA-100807/LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 586               		.file 5 "LUFA-100807/LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 587               		.file 6 "LUFA-100807/LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/DeviceStandardReq.h"
 588               		.file 7 "LUFA-100807/LUFA/Drivers/USB/HighLevel/USBTask.h"
 589               		.file 8 "/opt/homebrew/Cellar/avr-gcc@9/9.4.0_1/avr/include/stdio.h"
 590               		.file 9 "LUFA-100807/LUFA/Drivers/USB/Class/Device/../Common/Audio.h"
 591               		.file 10 "LUFA-100807/LUFA/Drivers/USB/Class/Device/../Common/MIDI.h"
 592               		.file 11 "Descriptors.h"
 593               		.file 12 "dualMoco.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:2      *ABS*:0000003e __SP_H__
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3      *ABS*:0000003d __SP_L__
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:4      *ABS*:0000003f __SREG__
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:6      *ABS*:00000001 __zero_reg__
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:17     .text.CALLBACK_USB_GetDescriptor:00000000 .Loc.0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:18     .text.CALLBACK_USB_GetDescriptor:00000000 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:23     .text.CALLBACK_USB_GetDescriptor:00000000 .Loc.1
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:26     .text.CALLBACK_USB_GetDescriptor:00000004 .Loc.2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:27     .text.CALLBACK_USB_GetDescriptor:00000004 .Loc.3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:31     .text.CALLBACK_USB_GetDescriptor:00000008 .Loc.4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:32     .text.CALLBACK_USB_GetDescriptor:00000008 .Loc.5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:33     .text.CALLBACK_USB_GetDescriptor:00000008 .Loc.6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:34     .text.CALLBACK_USB_GetDescriptor:00000008 .Loc.7
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:42     .text.CALLBACK_USB_GetDescriptor:00000018 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:44     .text.CALLBACK_USB_GetDescriptor:0000001a .Loc.8
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:45     .text.CALLBACK_USB_GetDescriptor:0000001a .Loc.9
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:48     .text.CALLBACK_USB_GetDescriptor:0000001e .Loc.10
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:50     .text.CALLBACK_USB_GetDescriptor:00000022 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:52     .text.CALLBACK_USB_GetDescriptor:00000024 .Loc.11
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:55     .text.CALLBACK_USB_GetDescriptor:00000028 .Loc.12
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:566    .progmem.data:00000139 DeviceDescriptorSerial
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:60     .text.CALLBACK_USB_GetDescriptor:0000002c .Loc.13
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:61     .text.CALLBACK_USB_GetDescriptor:0000002c .Loc.14
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:64     .text.CALLBACK_USB_GetDescriptor:00000030 .Loc.15
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:66     .text.CALLBACK_USB_GetDescriptor:00000030 .Loc.16
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:70     .text.CALLBACK_USB_GetDescriptor:00000032 .Loc.17
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:71     .text.CALLBACK_USB_GetDescriptor:00000032 .Loc.18
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:74     .text.CALLBACK_USB_GetDescriptor:00000036 .Loc.19
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:76     .text.CALLBACK_USB_GetDescriptor:0000003a L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:78     .text.CALLBACK_USB_GetDescriptor:0000003c .Loc.20
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:81     .text.CALLBACK_USB_GetDescriptor:00000040 .Loc.21
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:487    .progmem.data:000000e9 ConfigurationDescriptorSerial
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:85     .text.CALLBACK_USB_GetDescriptor:00000044 .Loc.22
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:89     .text.CALLBACK_USB_GetDescriptor:00000046 .Loc.23
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:92     .text.CALLBACK_USB_GetDescriptor:00000048 .Loc.24
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:100    .text.CALLBACK_USB_GetDescriptor:00000058 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:102    .text.CALLBACK_USB_GetDescriptor:0000005a .Loc.25
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:104    .text.CALLBACK_USB_GetDescriptor:0000005a .Loc.26
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:106    .text.CALLBACK_USB_GetDescriptor:0000005a .Loc.27
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:107    .text.CALLBACK_USB_GetDescriptor:0000005a .Loc.28
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:108    .text.CALLBACK_USB_GetDescriptor:0000005a .Loc.29
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:382    .progmem.data:00000080 LanguageString
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:117    .text.CALLBACK_USB_GetDescriptor:00000060 .Loc.30
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:120    .text.CALLBACK_USB_GetDescriptor:00000060 .Loc.31
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:124    .text.CALLBACK_USB_GetDescriptor:00000064 .Loc.32
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:125    .text.CALLBACK_USB_GetDescriptor:00000064 .Loc.33
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:129    .text.CALLBACK_USB_GetDescriptor:00000068 .Loc.34
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:133    .text.CALLBACK_USB_GetDescriptor:0000006a .Loc.35
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:134    .text.CALLBACK_USB_GetDescriptor:0000006a .Loc.36
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:138    .text.CALLBACK_USB_GetDescriptor:00000072 .Loc.37
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:140    .text.CALLBACK_USB_GetDescriptor:00000072 .Loc.38
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:142    .text.CALLBACK_USB_GetDescriptor:00000072 .Loc.39
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:143    .text.CALLBACK_USB_GetDescriptor:00000072 .Loc.40
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:144    .text.CALLBACK_USB_GetDescriptor:00000072 .Loc.41
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:329    .progmem.data:0000002a ManufacturerStringMIDI
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:153    .text.CALLBACK_USB_GetDescriptor:00000078 .Loc.42
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:156    .text.CALLBACK_USB_GetDescriptor:00000078 .Loc.43
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:160    .text.CALLBACK_USB_GetDescriptor:0000007c .Loc.44
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:164    .text.CALLBACK_USB_GetDescriptor:00000080 .Loc.45
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:168    .text.CALLBACK_USB_GetDescriptor:00000082 .Loc.46
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:169    .text.CALLBACK_USB_GetDescriptor:00000082 .Loc.47
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:171    .text.CALLBACK_USB_GetDescriptor:00000082 .Loc.48
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:172    .text.CALLBACK_USB_GetDescriptor:00000082 .Loc.49
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:173    .text.CALLBACK_USB_GetDescriptor:00000082 .Loc.50
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:352    .progmem.data:0000004e ManufacturerStringSerial
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:182    .text.CALLBACK_USB_GetDescriptor:00000088 .Loc.51
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:185    .text.CALLBACK_USB_GetDescriptor:00000088 .Loc.52
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:189    .text.CALLBACK_USB_GetDescriptor:0000008c .Loc.53
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:193    .text.CALLBACK_USB_GetDescriptor:00000090 .Loc.54
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:197    .text.CALLBACK_USB_GetDescriptor:00000092 .Loc.55
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:198    .text.CALLBACK_USB_GetDescriptor:00000092 .Loc.56
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:202    .text.CALLBACK_USB_GetDescriptor:0000009a .Loc.57
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:204    .text.CALLBACK_USB_GetDescriptor:0000009a .Loc.58
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:206    .text.CALLBACK_USB_GetDescriptor:0000009a .Loc.59
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:207    .text.CALLBACK_USB_GetDescriptor:0000009a .Loc.60
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:208    .text.CALLBACK_USB_GetDescriptor:0000009a .Loc.61
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:298    .progmem.data:00000000 ProductStringMIDI
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:217    .text.CALLBACK_USB_GetDescriptor:000000a0 .Loc.62
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:220    .text.CALLBACK_USB_GetDescriptor:000000a0 .Loc.63
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:224    .text.CALLBACK_USB_GetDescriptor:000000a4 .Loc.64
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:228    .text.CALLBACK_USB_GetDescriptor:000000a8 .Loc.65
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:232    .text.CALLBACK_USB_GetDescriptor:000000aa .Loc.66
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:233    .text.CALLBACK_USB_GetDescriptor:000000aa .Loc.67
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:235    .text.CALLBACK_USB_GetDescriptor:000000aa .Loc.68
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:236    .text.CALLBACK_USB_GetDescriptor:000000aa .Loc.69
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:237    .text.CALLBACK_USB_GetDescriptor:000000aa .Loc.70
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:306    .progmem.data:00000006 ProductStringSerial
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:246    .text.CALLBACK_USB_GetDescriptor:000000b0 .Loc.71
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:249    .text.CALLBACK_USB_GetDescriptor:000000b0 .Loc.72
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:253    .text.CALLBACK_USB_GetDescriptor:000000b4 .Loc.73
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:257    .text.CALLBACK_USB_GetDescriptor:000000b8 .Loc.74
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:261    .text.CALLBACK_USB_GetDescriptor:000000ba .Loc.75
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:264    .text.CALLBACK_USB_GetDescriptor:000000be .Loc.76
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:548    .progmem.data:00000127 DeviceDescriptorMIDI
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:268    .text.CALLBACK_USB_GetDescriptor:000000c2 .Loc.77
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:272    .text.CALLBACK_USB_GetDescriptor:000000c4 .Loc.78
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:275    .text.CALLBACK_USB_GetDescriptor:000000c8 .Loc.79
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:389    .progmem.data:00000084 ConfigurationDescriptorMIDI
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:279    .text.CALLBACK_USB_GetDescriptor:000000cc .Loc.80
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:283    .text.CALLBACK_USB_GetDescriptor:000000ce .Loc.81
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:289    .text.CALLBACK_USB_GetDescriptor:000000d6 .Loc.82
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:291    .text.CALLBACK_USB_GetDescriptor:000000d8 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:295    .text.CALLBACK_USB_GetDescriptor:000000d8 L0
                     .debug_frame:00000000 L0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:69     .text.CALLBACK_USB_GetDescriptor:00000032 .L2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:88     .text.CALLBACK_USB_GetDescriptor:00000046 .L3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:282    .text.CALLBACK_USB_GetDescriptor:000000ce .L12
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:260    .text.CALLBACK_USB_GetDescriptor:000000ba .L10
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:271    .text.CALLBACK_USB_GetDescriptor:000000c4 .L11
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:59     .text.CALLBACK_USB_GetDescriptor:0000002c .L4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:132    .text.CALLBACK_USB_GetDescriptor:0000006a .L5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:196    .text.CALLBACK_USB_GetDescriptor:00000092 .L6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:167    .text.CALLBACK_USB_GetDescriptor:00000082 .L7
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:231    .text.CALLBACK_USB_GetDescriptor:000000aa .L8
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:2327   .debug_abbrev:00000000 .Ldebug_abbrev0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3519   .debug_ranges:00000000 .Ldebug_ranges0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3525   .debug_line:00000000 .Ldebug_line0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:15     .text.CALLBACK_USB_GetDescriptor:00000000 .LFB91
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:292    .text.CALLBACK_USB_GetDescriptor:000000d8 .LFE91
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:2865   .debug_loc:0000002a .LLST0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:2822   .debug_loc:00000000 .LVUS0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3064   .debug_loc:00000188 .LLST1
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3037   .debug_loc:0000016e .LVUS1
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3160   .debug_loc:00000247 .LLST2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3119   .debug_loc:0000021f .LVUS2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3290   .debug_loc:00000359 .LLST3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3273   .debug_loc:00000349 .LVUS3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3364   .debug_loc:000003df .LLST4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3337   .debug_loc:000003c5 .LVUS4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:105    .text.CALLBACK_USB_GetDescriptor:0000005a .LBB2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:119    .text.CALLBACK_USB_GetDescriptor:00000060 .LBE2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3459   .debug_loc:0000049d .LLST5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3456   .debug_loc:0000049b .LVUS5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:141    .text.CALLBACK_USB_GetDescriptor:00000072 .LBB3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:155    .text.CALLBACK_USB_GetDescriptor:00000078 .LBE3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3469   .debug_loc:000004b2 .LLST6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3466   .debug_loc:000004b0 .LVUS6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:170    .text.CALLBACK_USB_GetDescriptor:00000082 .LBB4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:184    .text.CALLBACK_USB_GetDescriptor:00000088 .LBE4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3479   .debug_loc:000004c7 .LLST7
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3476   .debug_loc:000004c5 .LVUS7
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:205    .text.CALLBACK_USB_GetDescriptor:0000009a .LBB5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:219    .text.CALLBACK_USB_GetDescriptor:000000a0 .LBE5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3489   .debug_loc:000004dc .LLST8
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3486   .debug_loc:000004da .LVUS8
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:234    .text.CALLBACK_USB_GetDescriptor:000000aa .LBB6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:248    .text.CALLBACK_USB_GetDescriptor:000000b0 .LBE6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3499   .debug_loc:000004f1 .LLST9
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:3496   .debug_loc:000004ef .LVUS9
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:14     .text.CALLBACK_USB_GetDescriptor:00000000 .LVL0
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:30     .text.CALLBACK_USB_GetDescriptor:00000008 .LVL1
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:58     .text.CALLBACK_USB_GetDescriptor:0000002c .LVL3
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:68     .text.CALLBACK_USB_GetDescriptor:00000032 .LVL4
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:84     .text.CALLBACK_USB_GetDescriptor:00000044 .LVL6
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:87     .text.CALLBACK_USB_GetDescriptor:00000046 .LVL7
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:128    .text.CALLBACK_USB_GetDescriptor:00000068 .LVL12
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:131    .text.CALLBACK_USB_GetDescriptor:0000006a .LVL13
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:163    .text.CALLBACK_USB_GetDescriptor:00000080 .LVL17
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:166    .text.CALLBACK_USB_GetDescriptor:00000082 .LVL18
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:192    .text.CALLBACK_USB_GetDescriptor:00000090 .LVL21
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:195    .text.CALLBACK_USB_GetDescriptor:00000092 .LVL22
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:227    .text.CALLBACK_USB_GetDescriptor:000000a8 .LVL26
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:230    .text.CALLBACK_USB_GetDescriptor:000000aa .LVL27
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:256    .text.CALLBACK_USB_GetDescriptor:000000b8 .LVL30
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:259    .text.CALLBACK_USB_GetDescriptor:000000ba .LVL31
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:267    .text.CALLBACK_USB_GetDescriptor:000000c2 .LVL32
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:270    .text.CALLBACK_USB_GetDescriptor:000000c4 .LVL33
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:278    .text.CALLBACK_USB_GetDescriptor:000000cc .LVL34
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:281    .text.CALLBACK_USB_GetDescriptor:000000ce .LVL35
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:288    .text.CALLBACK_USB_GetDescriptor:000000d6 .LVL36
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:47     .text.CALLBACK_USB_GetDescriptor:0000001e .LVL2
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:73     .text.CALLBACK_USB_GetDescriptor:00000036 .LVL5
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:91     .text.CALLBACK_USB_GetDescriptor:00000048 .LVL8
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:103    .text.CALLBACK_USB_GetDescriptor:0000005a .LVL9
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:139    .text.CALLBACK_USB_GetDescriptor:00000072 .LVL14
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:203    .text.CALLBACK_USB_GetDescriptor:0000009a .LVL23
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:123    .text.CALLBACK_USB_GetDescriptor:00000064 .LVL11
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:159    .text.CALLBACK_USB_GetDescriptor:0000007c .LVL16
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:188    .text.CALLBACK_USB_GetDescriptor:0000008c .LVL20
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:223    .text.CALLBACK_USB_GetDescriptor:000000a4 .LVL25
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:252    .text.CALLBACK_USB_GetDescriptor:000000b4 .LVL29
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:116    .text.CALLBACK_USB_GetDescriptor:00000060 .LVL10
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:152    .text.CALLBACK_USB_GetDescriptor:00000078 .LVL15
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:181    .text.CALLBACK_USB_GetDescriptor:00000088 .LVL19
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:216    .text.CALLBACK_USB_GetDescriptor:000000a0 .LVL24
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:245    .text.CALLBACK_USB_GetDescriptor:000000b0 .LVL28
/var/folders/bq/146k_07x5pn0twfdhlrpxh7h0000gn/T//ccqbJcDU.s:595    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
mocoMode
